"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./Context/NFTMarketplaceContext.js":
/*!******************************************!*\
  !*** ./Context/NFTMarketplaceContext.js ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NFTMarketplaceContext: function() { return /* binding */ NFTMarketplaceContext; },\n/* harmony export */   NFTMarketplaceProvider: function() { return /* binding */ NFTMarketplaceProvider; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var web3modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web3modal */ \"./node_modules/web3modal/dist/index.js\");\n/* harmony import */ var web3modal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(web3modal__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ \"./Context/constants.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n//INTERNAL  IMPORT\n\n//---FETCHING SMART CONTRACT\nconst fetchContract = (signerOrProvider)=>new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.Contract(_constants__WEBPACK_IMPORTED_MODULE_4__.NFTMarketplaceAddress, _constants__WEBPACK_IMPORTED_MODULE_4__.NFTMarketplaceABI, signerOrProvider);\n//---CONNECTING WITH SMART CONTRACT\nconst connectingWithSmartContract = async ()=>{\n    try {\n        let contract;\n        if (window.ethereum) {\n            const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n            const connection = await web3Modal.connect();\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.BrowserProvider(connection);\n            const signer = await provider.getSigner();\n            contract = fetchContract(signer);\n        } else {\n            // Sử dụng một node Ethereum công khai ở đây, ví dụ: Infura, Alchemy, ...\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.JsonRpcProvider(\"https://eth-sepolia.g.alchemy.com/v2/ARDDq0zYTkXSYjFZIrXpMz-joq07xKOo\");\n            contract = fetchContract(provider);\n        }\n        return contract;\n    } catch (error) {\n        console.log(\"Something went wrong while connecting with contract\", error);\n        // Nếu có lỗi, khởi tạo contract với provider không đăng nhập\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.JsonRpcProvider(\"https://eth-sepolia.g.alchemy.com/v2/ARDDq0zYTkXSYjFZIrXpMz-joq07xKOo\");\n        const contract = fetchContract(provider);\n        return contract;\n    }\n};\nconst NFTMarketplaceContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createContext();\nconst NFTMarketplaceProvider = (param)=>{\n    let { children } = param;\n    _s();\n    const titleData = \"Discover, collect, and sell NFTs\";\n    //------USESTAT\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [openError, setOpenError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [currentAccount, setCurrentAccount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [accountBalance, setAccountBalance] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_3__.useRouter)();\n    //---CHECK IF WALLET IS CONNECTD\n    const checkIfWalletConnected = async ()=>{\n        try {\n            if (!window.ethereum) return setOpenError(true), setError(\"Install MetaMask\");\n            const accounts = await window.ethereum.request({\n                method: \"eth_accounts\"\n            });\n            if (accounts.length) {\n                setCurrentAccount(accounts[0]);\n                console.log(accounts[0]);\n            } else {\n                // setError(\"No Account Found\");\n                // setOpenError(true);\n                console.log(\"No account\");\n            }\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.BrowserProvider(window.ethereum);\n            const getBalance = await provider.getBalance(accounts[0]);\n            const bal = ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.formatEther(getBalance);\n            setAccountBalance(bal);\n        } catch (error) {\n            // setError(\"Something wrong while connecting to wallet\");\n            // setOpenError(true);\n            console.log(\"not connected\");\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        checkIfWalletConnected();\n    }, []);\n    const approveAllNFTs = async ()=>{\n        try {\n            const contract = await connectingWithSmartContract();\n            const data = await contract.fetchMyNFTs();\n            // Lấy danh sách tokenId\n            const tokenIds = data.map((nft)=>nft.tokenId.toString());\n            // Approve từng NFT\n            for (const tokenId of tokenIds){\n                const approvalTx = await contract.approve(contract.address, tokenId);\n                await approvalTx.wait();\n                console.log(\"Approved NFT with token ID ${tokenId}\");\n            }\n        } catch (error) {\n            console.error(\"Error approving NFTs:\", error);\n        }\n    };\n    //---CONNET WALLET FUNCTION\n    const connectWallet = async ()=>{\n        try {\n            if (!window.ethereum) return setOpenError(true), setError(\"Install MetaMask\");\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n            console.log(accounts);\n            setCurrentAccount(accounts[0]);\n            // window.location.reload();\n            connectingWithSmartContract();\n            await approveAllNFTs();\n        } catch (error) {\n        // setError(\"Error while connecting to wallet\");\n        // setOpenError(true);\n        }\n    };\n    //---UPLOAD TO IPFS FUNCTION\n    const uploadToPinata = async (file)=>{\n        if (file) {\n            try {\n                const formData = new FormData();\n                formData.append(\"file\", file);\n                const response = await (0,axios__WEBPACK_IMPORTED_MODULE_6__[\"default\"])({\n                    method: \"post\",\n                    url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n                    data: formData,\n                    headers: {\n                        pinata_api_key: \"d2c77a08f8de766632d0\",\n                        pinata_secret_api_key: \"\\n            9546cb69a8634229d95e750e526fedd14eeb7c8856c12e0ae9c4b1bd0e56744e\",\n                        \"Content-Type\": \"multipart/form-data\"\n                    }\n                });\n                const ImgHash = \"https://gateway.pinata.cloud/ipfs/\".concat(response.data.IpfsHash);\n                return ImgHash;\n            } catch (error) {\n                console.log(\"Unable to upload image to Pinata\");\n            }\n        }\n    };\n    //---CREATENFT FUNCTION\n    const createNFT = async (name, price, image, description, router)=>{\n        if (!name || !description || !price || !image) return setError(\"Data Is Missing\"), setOpenError(true);\n        const data = JSON.stringify({\n            name,\n            description,\n            image\n        });\n        try {\n            const response = await (0,axios__WEBPACK_IMPORTED_MODULE_6__[\"default\"])({\n                method: \"POST\",\n                url: \"https://api.pinata.cloud/pinning/pinJSONToIPFS\",\n                data: data,\n                headers: {\n                    pinata_api_key: \"d2c77a08f8de766632d0\",\n                    pinata_secret_api_key: \"\\n          9546cb69a8634229d95e750e526fedd14eeb7c8856c12e0ae9c4b1bd0e56744e\",\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            const url = \"https://gateway.pinata.cloud/ipfs/\".concat(response.data.IpfsHash);\n            console.log(url);\n            await createSale(url, price);\n            router.push(\"/searchPage\");\n        } catch (error) {\n            setError(\"Error while creating NFT\");\n            setOpenError(true);\n        }\n    };\n    //--- createSale FUNCTION\n    const createSale = async (url, formInputPrice, isReselling, id)=>{\n        try {\n            console.log(url, formInputPrice, isReselling, id);\n            const price = ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.parseUnits(formInputPrice, \"ether\");\n            const contract = await connectingWithSmartContract();\n            const listingPrice = await contract.getListingPrice();\n            const transaction = !isReselling ? await contract.createToken(url, price, {\n                value: listingPrice.toString()\n            }) : await contract.resellToken(id, price, {\n                value: listingPrice.toString()\n            });\n            await transaction.wait();\n            console.log(transaction);\n        } catch (error) {\n            setError(\"error while creating sale\");\n            setOpenError(true);\n            console.log(error);\n        }\n    };\n    //--FETCHNFTS FUNCTION\n    const fetchNFTs = async ()=>{\n        try {\n            const contract = await connectingWithSmartContract();\n            const data = await contract.fetchMarketItems();\n            console.log(data);\n            const items = await Promise.all(data.map(async (param)=>{\n                let { tokenId, seller, owner, price: unformattedPrice } = param;\n                if (tokenId === 0) {\n                    // Bỏ qua tokenId không hợp lệ\n                    return null;\n                }\n                const tokenURI = await contract.tokenURI(tokenId);\n                const { data: { image, name, description } } = await axios__WEBPACK_IMPORTED_MODULE_6__[\"default\"].get(tokenURI, {});\n                const price = ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.formatUnits(unformattedPrice.toString(), \"ether\");\n                return {\n                    price,\n                    tokenId: tokenId.toString(),\n                    seller,\n                    owner,\n                    image,\n                    name,\n                    description,\n                    tokenURI\n                };\n            }));\n            return items;\n        // }\n        } catch (error) {\n            // setError(\"Error while fetching NFTS\");\n            // setOpenError(true);\n            console.log(error);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        fetchNFTs();\n    }, []);\n    //--FETCHING MY NFT OR LISTED NFTs\n    const fetchMyNFTsOrListedNFTs = async (type)=>{\n        try {\n            if (currentAccount) {\n                const contract = await connectingWithSmartContract();\n                const data = type == \"fetchItemsListed\" ? await contract.fetchItemsListed() : await contract.fetchMyNFTs();\n                const items = await Promise.all(data.map(async (param)=>{\n                    let { tokenId, seller, owner, price: unformattedPrice } = param;\n                    const tokenURI = await contract.tokenURI(tokenId);\n                    const { data: { image, name, description } } = await axios__WEBPACK_IMPORTED_MODULE_6__[\"default\"].get(tokenURI);\n                    const price = ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.formatUnits(unformattedPrice.toString(), \"ether\");\n                    return {\n                        price,\n                        tokenId: tokenId.toString(),\n                        seller,\n                        owner,\n                        image,\n                        name,\n                        description,\n                        tokenURI\n                    };\n                }));\n                return items;\n            }\n        } catch (error) {\n            console.log(error);\n        // setError(\"Error while fetching listed NFTs\");\n        // setOpenError(true);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        fetchMyNFTsOrListedNFTs();\n    }, []);\n    //---buy NFT\n    const buyNFT = async (nft)=>{\n        try {\n            const contract = await connectingWithSmartContract();\n            const price = ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.parseUnits(nft.price.toString(), \"ether\");\n            const transaction = await contract.createMarketSale(nft.tokenId, {\n                value: price\n            });\n            await transaction.wait();\n            router.push(\"/author\");\n        } catch (error) {\n            setError(\"Error While buying NFT\");\n            setOpenError(true);\n        }\n    };\n    // Delete NFT\n    const burnNFT = async (tokenId)=>{\n        try {\n            const contract = await connectingWithSmartContract();\n            const tx = await contract.burnNFT(tokenId);\n            await tx.wait();\n            router.push(\"/author\");\n            console.log(\"NFT burned successfully\");\n        } catch (error) {\n            console.error(\"Error burning NFT:\", error);\n        }\n    };\n    // cancel Sale NFT\n    const cancelSale = async (tokenId)=>{\n        try {\n            const contract = await connectingWithSmartContract();\n            const tx = await contract.cancelSale(tokenId);\n            await tx.wait();\n            router.push(\"/author\");\n            console.log(\"NFT sale canceled successfully\");\n        } catch (error) {\n            console.error(\"Error canceling NFT sale:\", error);\n        }\n    };\n    const getSigner = async ()=>{\n        try {\n            const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n            const connection = await web3Modal.connect();\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.BrowserProvider(connection);\n            const signer = await provider.getSigner();\n            return signer;\n        } catch (error) {\n            console.error(\"Error getting signer:\", error);\n            throw error;\n        }\n    };\n    const transferNFT = async (tokenId, address)=>{\n        try {\n            console.log(\"Tranfer to: \", tokenId, address);\n            const contract = await connectingWithSmartContract();\n            const signer = await getSigner();\n            const tx = await contract.connect(signer)[\"transferFrom(address,address,uint256)\"](currentAccount, address, tokenId);\n            const receipt = await tx.wait();\n            if (receipt.status === 1) {\n                console.log(\"NFT transferred successfully!\");\n            } else {\n                console.error(\"Transaction failed with error:\", receipt.status);\n            }\n        } catch (error) {\n            console.error(\"Error transferring NFT:\", error);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(NFTMarketplaceContext.Provider, {\n        value: {\n            uploadToPinata,\n            checkIfWalletConnected,\n            connectWallet,\n            createNFT,\n            fetchNFTs,\n            fetchMyNFTsOrListedNFTs,\n            buyNFT,\n            burnNFT,\n            cancelSale,\n            createSale,\n            transferNFT,\n            currentAccount,\n            titleData,\n            setOpenError,\n            openError,\n            error,\n            accountBalance\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\ninht\\\\OneDrive\\\\M\\xe1y t\\xednh\\\\Đồ \\xc1n\\\\Code\\\\connectingcontract\\\\Context\\\\NFTMarketplaceContext.js\",\n        lineNumber: 397,\n        columnNumber: 5\n    }, undefined);\n};\n_s(NFTMarketplaceProvider, \"CDZ9ygI5YG/J3HxjLK+h1omYzF0=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_3__.useRouter\n    ];\n});\n_c = NFTMarketplaceProvider;\nvar _c;\n$RefreshReg$(_c, \"NFTMarketplaceProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Context/NFTMarketplaceContext.js\n"));

/***/ })

});